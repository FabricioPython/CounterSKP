# -*- coding: utf-8 -*-
"""Reserva_CounterSKP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yI1nE3hveN6Jww8XKllLcjIETHKKrvxq

# Como usar:

1. Criar um diretorio raiz chamado Skps;
2. Criar um subdiretório que armazenará as imagens;
3. Mover as imagens para o subdiretório;
4. Adicionar em locals o nome do diretorio onde as imagens dos skp's estão armazenadas;
5. Definir no campo variáveis os nomes de agencia e nome;


Pontos de Atencão: é muito importante a foto do canhoto ser de qualidade e não haver nenhum faltando na sequencia fisica.

Labels de nomes devem ser adicionados aos nomes das imagens.

# install
"""

# Install the zbar shared library
!apt-get update
!apt-get install -y libzbar0
!pip install pyzbar

"""# LibsPy"""

from pyzbar.pyzbar import decode
from PIL import Image
import pandas as pd
import os
from datetime import datetime
from google.colab import userdata

"""# Locals"""

# local dos images skps
os.chdir(f"{userdata.get('base')}AgenciaTeste")

"""# Funções"""

from typing import List
def ler_codigo_de_barras(image_path):
    try:
        img = Image.open(image_path)
        decoded_objects = decode(img)
        if decoded_objects:
            return [obj.data.decode('utf-8') for obj in decoded_objects]
        else:
            return None
    except FileNotFoundError:
        print(f"Erro: Arquivo não encontrado em {image_path}")
        return None
    except Exception as e:
        print(f"Erro ao decodificar a imagem: {e}")
        return None

def maior_menor(skp:List):
  aux = []
  for item in skp:
    aux.append(int(item.replace('T', '')))
  return [min(aux), max(aux)]

def sequencia(skp:List):
  return [skps for skps in range(skp[0], skp[1]+1)]

def tipagem():
  res = []
  files = os.listdir()
  for file in files:
    if file.endswith('_B.jpg'):
      res.append('Tipo B')
    elif file.endswith('_A.jpg'):
      res.append('Tipo A')
    elif file.endswith('_C.jpg'):
      res.append('Tipo C')
  return res

"""# Total de Imagens"""

print('Total de Imagens')
len(os.listdir())

"""# Execução"""

skp = []
for image in os.listdir():
  skp.append(ler_codigo_de_barras(image))
  print('imagem: ', image)

skp

lista_skp = [maior_menor(item) for item in skp]

"""# Canhotos por Sequencia"""

# Tamanho dos Itens Sequencia
total = []
for i, item in enumerate(skp):
  seq = sequencia(maior_menor(item))
  print(len(seq))
  lista_skp[i].append(len(seq))
  lista_skp[i].append(tipagem()[i])
  total.append(len(seq))
print('Total de Caixas prontas: ', sum(total))

#cols_relatorio = ['Inicial e Final', 'Sequencia', 'Tipo', 'Quantidade']
cols_relatorio = ['Inicial', 'Final', 'Quantidade', 'Tipo']

lista_skp

df = pd.DataFrame(lista_skp, columns=cols_relatorio)

"""# Variáveis"""

agencia  = '001'
nome = 'Agteste'
df['Agencia'] = agencia
df['Nome'] = nome

df

# Caixas prontas
Relatorio = f'''

\033[1m# Relatório Agencia {nome} - CGC: {agencia}\033[0m

\033[1mTipo A: {df[df['Tipo'] == 'Tipo A']['Quantidade'].sum()}\033[0m
\033[1mTipo B: {df[df['Tipo'] == 'Tipo B']['Quantidade'].sum()}\033[0m
\033[1mTipo C: {df[df['Tipo'] == 'Tipo C']['Quantidade'].sum()}\033[0m


\033[1mTotal de caixas prontas: {df['Quantidade'].sum()}\033[0m
Data: {datetime.now().strftime("%d-%m-%Y")}

'''
print(Relatorio)

os.chdir(userdata.get('base'))

df.to_excel(f'relatorio_Agencia_{nome}_{agencia}_Data_{datetime.now().strftime("%d-%m-%Y")}.xlsx', sheet_name=f'{nome}-{agencia}')